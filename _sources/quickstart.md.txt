# Getting Started

Here, we have provided a quick start guide that will allow you to get up and running quickly, especially if you wish to simply use the
same pruned networks as utilized in the KSTAR paper. 

## Installation

KSTAR can be installed via `pip`, `conda`, tarball, and directly from the Git repository. We recommend using conda to install the scientific packages `conda install anaconda` before installing openensembles. 

### Pip

To install via pip, execute `pip install kstar`.

### Conda
To install via conda, execute `conda install -c naeglelab kstar`.

### Tarball

To install via a tarball, head over to the [Releases page](https://github.com/NaegleLab/KSTAR/releases) and download the latest stable tar release.

Afterwards, navigate to your downloads directory and execute the following commands, substituting <version> for the release's version number:
```
tar -xvf KSTAR-<version>.tar.gz
cd KSTAR-<version>
python setup.py install
```

### Git

If you want to try out the latest commit, you can install directly from the Git repository by executing the following commands:
```
git clone https://github.com/NaegleLab/KSTAR
cd KSTAR
python setup.py install
```

## Configuring your KSTAR environment

After installing KSTAR, all necessary resource files (reference proteome and phosphoproteome) and networks (either downloaded from
FigShare or generated with prune.py) will need to be downloaded and configured so that KSTAR can find these files.

### Downloading Resource Files

We have provided all resource files required for running KSTAR in a publicly available figshare, which includes the reference proteome and 
the reference phosphoproteom from KinPred. We have provided a mechanism to easily download these into the KSTAR environment. After installing KSTAR, 
run install_resource_files() within python to obtain these:

```
from kstar import config

config.install_resource_files()
```


### Downloading Networks

1. Go to [Network Figshare](https://figshare.com/articles/dataset/NETWORKS/14944305)
2. Download the networks, decompress/unzip the files, and store in easily accessible folder.
3. Use the update_network_directory() function in config.py to tell config where the network directory is stored. On install, KSTAR is set to look in the 
current working directory. This will only need to be done once... KSTAR will remember the directory location upon subsequent imports. However, if 
network files are changed/moved, this step will need to be repeated.
4. KSTAR uses pickled versions of these network files. By default, update_network_directory() will automatically generate network pickles (unless
create_pickles is set to False). However, if pickles have not been created (either on purpose or due to errors), use create_network_pickles, 
which will take individual networks within the network directory and pickle them for you.

The python code used for steps 3 and 4 should like similar to below:
```
from kstar import config

#update network directory: If KSTAR does not find this directory + necessary files, it will notify you
config.NETWORK_DIR = config.update_network_directory('./Networks/NetworKIN')

#create network pickles. Only need to run this function if network pickles were not already generated.
config.create_network_pickles()

#update where pickles are located. Will not need to do this on future imports.
config.NETWORK_Y_PICKLE = f'{config.NETWORK_DIR}/network_Y.p'
config.NETWORK_ST_PICKLE = f'{config.NETWORK_DIR}/network_ST.p'
```


It is also possible to generate your own networks, either with a different weighted kinase-substrate graph, different pruning parameters, or both.
For details on how to generate your own networks, see the tutorial. After generating networks, you should still do steps 3 and 4 above.

### Verify that KSTAR environment is ready

To check to make sure the previous steps all worked as desired, run check_configuration():
```
from kstar import config

config.check_configuration()
```
This will indicate whether you are ready to generate kinase activity predictions or not. If you are not, it will tell you what steps still need to
be performed. 

## Follow the provided tutorial

That is all you need to do to set up your KSTAR environment (see 'Running Large Datasets with Nextflow' if working with large datasets, as
set up is slightly different). We recommend working through the tutorial in the following section to get an idea of the KSTAR workflow, 
either with the example dataset provided in our supplementary data figshare or with your own dataset of interest. You will only need to follow 
the 'Generating Pruned Networks' section if you would like to use your own networks for analysis, otherwise go straight to 'Map Datasets to KinPred'.
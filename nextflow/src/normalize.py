#!/usr/bin/env python3

#%%
import pandas as pd 
import argparse
import config
import numpy as np
from summarize_activities import summarize_activities

def normalize_activities(activities, normalizers, data_column, default_normalization = 0.05, normalization_multiplier = 0.05, num_networks=50):
    """
    Generates the normalized activities and corresponding summary statistics

    Parameters
    ----------
    activities : dict
        hypergeometric activities generated by KSTAR algorithm
        key : experiment
        value : hypergeometric result
    default_normalization: float
        value to normalize to, if no normalizers are set.
    
    Returns
    --------
    normalized_activities : dict
        normalized Kinase Activity results
        key : experiment
        value : normalized results
    summarized_activities : dict
        summary statistics of normalized kinase activity
        key : experiment
        value : summary statistics
    """

    normalizers = normalizers[data_column].to_dict()
    activity = activities[activities['data'] == data_column]
    normalized_activity_list = calculate_normalized_activity(
                activity, 
                normalizers, 
                default_normalization, 
                normalization_multiplier,
                num_networks)
    normalized_agg_activities = aggregate_normalized_activities(normalized_activity_list)
    activities_normalized =summarize_activities(normalized_agg_activities,'median_normalized_activity')

    return normalized_activity_list, normalized_agg_activities, activities_normalized

    
    # normalized_activities = []
    # for data in self.data_columns:
    #     if type(self.normalizers) is dict:
    #         normalizers = self.normalizers
    #     elif type(self.normalizers) is pd.DataFrame and data in self.normalizers.columns:
    #         #print("setting normalizers")
    #         normalizers = self.normalizers[data].to_dict()
    #     else:
    #         normalizers = {}
    #     activity = activities[activities['data'] == data]
    #     normalized_activities.append(
    #         self.calculate_normalized_activity(
    #             activity, 
    #             normalizers, 
    #             default_normalization, 
    #             normalization_multiplier))
    # self.normalized_activities_list = pd.concat(normalized_activities)
    # self.aggregate_normalized_activities(self.normalized_activities_list)
    
    # return self.normalized_activities_list, self.normalized_agg_activities



def calculate_normalized_activity(kinase_activity, normalizers, default_normalization = 0.05, normalization_multiplier = 0.05, num_networks=50):
    """
    Activity is normalized based on kinase normalization factors. 
    Added Columns : 
        Normalization Factor : normalization factor for given Kinase
        Significant : 1 if Kinase Activity <= Normalization Factor
        Normalized Activity : ( Kinase Activity ) / ( Normalization Factor ) * Normalization Multiplier

    Parameters
    ----------
    kinase_activity : pandas df
        hypergeometric activity calculated through KSTAR algorithm
    default_normalization : float
        Normalization factor to use if one not provided
    normalization_multiplier : float
        normalization multiplier to use for calculated normalized kinase activity
    """

    normalized_activity = kinase_activity.copy()
    normalized_activity['Normalization Factor'] = normalized_activity[config.KSTAR_KINASE].apply(lambda name: normalizers[name] if name in normalizers.keys() else default_normalization)
    if num_networks > 0:
        normalized_activity['Significant'] = normalized_activity.apply(lambda row: (row['kinase_activity'] <= row['Normalization Factor'] / num_networks ) * 1, axis = 1)
    else:
        normalized_activity['Significant'] = normalized_activity.apply(lambda row: (row['kinase_activity'] <= row['Normalization Factor']) * 1, axis = 1)
    normalized_activity['Normalized Activity'] = normalized_activity.apply(lambda row: np.clip( row['kinase_activity'] / row['Normalization Factor'] * normalization_multiplier, 0.0, 1.0 ), axis = 1)
    return normalized_activity

def aggregate_normalized_activities(normalized_activities):
    """
    Summarizes normalized kinase activity results of all networks by kinase
    Summaries provided : 
        median original activity
        average original activity
        median normalized activity
        average normalized activity
        count significant
        fraction significant
    
    Parameters
    ----------
    normalized_activity : pandas df
        Normalized kinase activty
    
    Returns
    --------
    summary : pandas df
        summarized data of all networks by kinase
    """
    normalized_agg_activities = normalized_activities.groupby(['data',config.KSTAR_KINASE]).agg(
        median_original_activity = ('kinase_activity', 'median'),
        median_normalized_activity = ('Normalized Activity', 'median'),
        count_significant = ('Significant', 'sum'),
        fraction_significant = ('Significant', 'mean')
    ).reset_index()
    return normalized_agg_activities





def parse_args():
    parser = argparse.ArgumentParser(description='Parse Normalization Arguments')
    parser.add_argument( '--experiment_activity', action='store', dest= 'experiment_activity', help='Experiment hypergeometric activity', required=True)
    parser.add_argument( '--normalizers', action='store', dest= 'normalizers', help='normalizers for data column', required=True)
    parser.add_argument( '--data_column', action='store', dest= 'data_column', help='Data column of random experients', required=True)
    parser.add_argument( '--default_normalization', action='store', dest= 'default_normalization', help='FPR target alpha', default=0.05, type=float)
    parser.add_argument( '--normalization_multiplier', action='store', dest= 'normalization_multiplier', help='FPR target alpha', default=0.05, type=float)
    parser.add_argument( '--num_networks', action='store', dest='num_networks', help='Number of networks using in calculating activities', default=50, type=int)

    results = parser.parse_args()
    return results


def main():
    results = parse_args()

    experiment_activity = pd.read_table(results.experiment_activity)
    normalizers = pd.read_table(results.normalizers, index_col=0)

    normalized_activity_list, normalized_agg_activities, activities_normalized = normalize_activities(experiment_activity, normalizers, results.data_column, results.default_normalization, results.normalization_multiplier, results.num_networks)

    data_column = results.data_column
    normalized_activity_list.to_csv(f"{data_column}_normalized_activity_list.tsv", sep = "\t", index=False)
    normalized_agg_activities.to_csv(f"{data_column}_normalized_aggregate_activity.tsv", sep = "\t", index=False)
    activities_normalized.to_csv(f"{data_column}_normalized_activities.tsv", sep = "\t")
#%%
if __name__ == "__main__":
    main()
# %%

